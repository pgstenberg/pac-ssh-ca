services:

#
# Container used to test SSH as a "user"
#

  client:
    build:
      context: .
      dockerfile_inline: |
        FROM ubuntu:noble

        RUN apt update && \
          apt install -y openssh-client curl dnsutils

        RUN useradd -s /bin/bash -d /home/user01 -m -G sudo user01

        USER user01
        WORKDIR /home/user01

        RUN ssh-keygen -t rsa -a 2048 -N '' -f ~/.ssh/id_rsa
    stdin_open: true
    tty: true
    entrypoint: /bin/bash

#
# DNS used for reverse DNS lookups in host CA
#

  dns:
    build:
      context: .
      dockerfile_inline: |
        FROM ubuntu:noble

        RUN apt update && \
          apt install -y dnsmasq dnsutils ldnsutils     

        RUN mkdir -p /etc/hosts.d
        RUN cat <<'EOF' > /etc/dnsmasq.conf
        port=53
        addn-hosts=/etc/hosts.d
        server=/#/127.0.0.11
        cache-size=1000
        EOF

    command:
      - /bin/bash
      - -c
      - |
        rm -f /etc/hosts.d/docker
        echo $(dig host01 +short) host01.example.local >> /etc/hosts.d/docker
        echo $(dig host02 +short) host02.example.local >> /etc/hosts.d/docker
        echo $(dig host03 +short) host03.example.local >> /etc/hosts.d/docker
        /usr/sbin/dnsmasq -k -q
    depends_on:
      host01:
        condition: service_started
      host02:
        condition: service_started
      host03:
        condition: service_started

#
# IdP used for OIDC federated user logins
#

  idp:
    build:
      context: .
      dockerfile_inline: |
        FROM dexidp/dex:v2.39.1-alpine

        RUN mkdir -p /etc/dex /var/dex
        RUN cat <<'EOF' >> /etc/dex/config.yml

        issuer: http://127.0.0.1.nip.io:5556/dex

        storage:
          type: sqlite3
          config:
            file: /var/dex/data.db

        web:
          http: :5556

        logger:
          level: "debug"

        staticClients:
          - id: simple-ssh-ca
            redirectURIs:
              - "http://127.0.0.1:8080/oauth/v2/callback"
            name: "OpenID Connect SSH CA"
            secret: ZXhhbXBsZS1hcHAtc2VjcmV0

        enablePasswordDB: true

        staticPasswords:
          - email: "user01@example.local"
            username: "user01"
            # Password1
            hash: "$$2y$$10$$50oFGLcRAgLyW99g4yQ5dOdXpBI7ExqcTsJolXt3xxXm9QzdxR/y2"
            userID: "08a8684b-db88-4b73-90a9-3cd1661f5466"
        EOF
    command: dex serve /etc/dex/config.yml
    networks:
      default:
        aliases:
          - 127.0.0.1.nip.io
    ports:
      - "5556:5556"

#
# SSH Certificat Authorities
#

  ca-host:
    build:
      context: ../../
      dockerfile_inline: |
        FROM golang:1.21.4

        WORKDIR /build
        COPY . ./

        # Download Go modules
        RUN go mod download
        # Build
        RUN CGO_ENABLED=0 GOOS=linux go build -o ./simple-ssh-ca .

        FROM ubuntu:noble
        COPY --from=0 /build/simple-ssh-ca /bin/simple-ssh-ca

        RUN apt update && \
          apt install -y curl wget

        RUN wget https://github.com/mikefarah/yq/releases/download/v4.44.1/yq_linux_amd64 -O /usr/bin/yq \ 
          && chmod +x /usr/bin/yq

        COPY ./examples/ansible/delegate_id_rsa.pub /delegate_id_rsa.pub

        RUN cat <<EOF >> /config.yml
        issuer: host.ca.example.local
        reverse_lookup_dns: dns
        delegation:
          ticket_ttl: 8760h
          delegates:
            - $(cat /delegate_id_rsa.pub)
        EOF

    command: /bin/simple-ssh-ca --config /config.yml
    healthcheck:
      test: curl --fail http://localhost/crypto/public || exit 1
    networks:
      default:
        aliases:
          - host.ca.example.local

  ca-user:
    build:
      context: ../../
      dockerfile_inline: |
        FROM golang:1.21.4

        WORKDIR /build
        COPY . ./

        # Download Go modules
        RUN go mod download
        # Build
        RUN CGO_ENABLED=0 GOOS=linux go build -o ./simple-ssh-ca .

        FROM ubuntu:noble
        COPY --from=0 /build/simple-ssh-ca /bin/simple-ssh-ca

        RUN apt update && \
          apt install -y curl

        RUN cat <<EOF >> /config.yml
        issuer: user.ca.example.local
        federation:
          openid_connect:
            state_ttl: 5m
            issuer: "http://127.0.0.1.nip.io:5556/dex"
            principal_claim: name
            client_id: simple-ssh-ca
            client_secret: ZXhhbXBsZS1hcHAtc2VjcmV0
            redirect_uri: "http://127.0.0.1:8080/oauth/v2/callback"
            scopes:
              - openid
              - email
              - profile
        EOF

    command: /bin/simple-ssh-ca --config /config.yml
    healthcheck:
      test: curl --fail http://localhost/crypto/public || exit 1
    ports:
      - "8080:80"
    networks:
      default:
        aliases:
          - user.ca.example.local
#
# Ansible Master
#

  ansible-master:
    build:
      context: .
      dockerfile_inline: |
        FROM ubuntu:noble

        RUN apt update && \
          apt install -y openssh-server python3 python3-pip

        RUN python3 -m pip install ansible --break-system-packages

        COPY ./delegate_id_rsa /root/.ssh/id_rsa
        COPY ./delegate_id_rsa.pub /root/.ssh/id_rsa.pub

        RUN mkdir -p /etc/ansible
        RUN cat <<'EOF' >> /etc/ansible/ansible.cfg
        [defaults]
        host_key_checking = False
        EOF

        RUN cat <<'EOF' >> /etc/ansible/hosts
        [example.local]
        host01.example.local
        host02.example.local
        host03.example.local
        EOF

        RUN mkdir -p /etc/ansible/group_vars
        RUN cat <<'EOF' >> /etc/ansible/group_vars/example.local
        ca_host: host.ca.example.local
        EOF

        COPY playbook.yml /opt/ansible/playbook.yml
    working_dir: /opt/ansible
    command: ansible-playbook playbook.yml
    depends_on:
      host01:
        condition: service_healthy
      host02:
        condition: service_healthy
      host03:
        condition: service_healthy
      ca-host:
        condition: service_healthy
      ca-user:
        condition: service_healthy

#
# Host Definitions
#

  host01:
    &host
    build:
      context: .
      dockerfile_inline: |
        FROM ubuntu:noble

        RUN apt update && \
          apt install -y python3 python3-pip cron openssh-server supervisor git

        RUN python3 -m pip install ansible --break-system-packages

        COPY ./delegate_id_rsa.pub /root/.ssh/authorized_keys

        RUN useradd -s /bin/bash -d /home/user01 -m -G sudo user01

        RUN cat <<'EOF' >> /etc/supervisor/conf.d/supervisord.conf
        [supervisord]
        user=root
        nodaemon=true

        [program:cron]
        command=/usr/sbin/cron -f
        stdout_logfile=/dev/fd/1
        stdout_logfile_maxbytes=0
        redirect_stderr=true
        autorestart=true

        [program:sshd]
        command=/usr/sbin/sshd -D -e
        stdout_logfile=/dev/fd/1
        stdout_logfile_maxbytes=0
        redirect_stderr=true
        autorestart=true

        [program:ansible-pull]
        command = ansible-pull -U https://github.com/pgstenberg/simple-ssh-ca.git examples/ansible/playbook-pull.yml
        stdout_logfile=/dev/fd/1
        stdout_logfile_maxbytes=0
        redirect_stderr=true
        startsecs = 0
        startretries = 1    
        autorestart = false
        EOF

        RUN mkdir -p /run/sshd
        RUN cat <<'EOF' >> /etc/ssh/sshd_config.d/custom.conf
        TrustedUserCAKeys /etc/ssh/ssh_trusted_ca.pub
        HostCertificate /etc/ssh/ssh_host_rsa_key-cert.pub
        EOF

        RUN mkdir -p /etc/ansible /etc/ansible/host_vars

        RUN cat <<'EOF' >> /etc/ansible/hosts
        localhost ansible_connection=local
        EOF

        RUN cat <<'EOF' >> /etc/ansible/host_vars/localhost
        ca_host: host.ca.example.local
        ca_user: user.ca.example.local
        EOF

    command: /usr/bin/supervisord
    healthcheck:
      test: bash -c "exec 6<> /dev/tcp/localhost/22"
    depends_on:
      ca-host:
        condition: service_healthy
      ca-user:
        condition: service_healthy
    hostname: host01.example.local
    networks:
      default:
        aliases:
          - host01.example.local
  host02:
    <<: *host
    hostname: host02.example.local
    networks:
      default:
        aliases:
          - host02.example.local
  host03:
    <<: *host
    hostname: host03.example.local
    networks:
      default:
        aliases:
          - host03.example.local